<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mobius Index</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-08T12:57:18.820Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MobiusIndex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>deepin下设置conky-manager</title>
    <link href="http://yoursite.com/2019/11/03/deepin%E4%B8%8B%E8%AE%BE%E7%BD%AEconky-manager/"/>
    <id>http://yoursite.com/2019/11/03/deepin下设置conky-manager/</id>
    <published>2019-11-03T06:23:06.000Z</published>
    <updated>2019-11-08T12:57:18.820Z</updated>
    
    <content type="html"><![CDATA[<p>Conky是Linux下的桌面美化工具，可以把系统信息显示到桌面上。而conky-manager则有更好的UI模式，至少不闪来闪去的</p><a id="more"></a><hr><p>conky-manager是conky的拓展，所以我们需要conky的主体文件<br>    # 安装 conky<br>    sudo apt install conky-all<br>    # 安装 conky-manager<br>    wget –no-check-certificate <a href="https://github.com/teejee2008/conky-manager/releases/download/v2.4/conky-manager-v2.4-amd64.run" target="_blank" rel="noopener">https://github.com/teejee2008/conky-manager/releases/download/v2.4/conky-manager-v2.4-amd64.run</a><br>    chmod +x conky-manager-v2.4-amd64.run<br>    sudo ./conky-manager-v2.4-amd64.run</p><p>如果出现问题可以去<a href="https://github.com/teejee2008/conky-manager/releases" title="conky-manager" target="_blank" rel="noopener">conky-manager</a>作者的github手动干预</p><p>安装完成后，进入主目录下的 .conky (这是个隐藏文件夹) 创建一个属于你的conky配置，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.conky</span><br><span class="line">mkdir MyConky</span><br><span class="line">touch MyConkyInfo</span><br></pre></td></tr></table></figure><p>并将下面的代码粘贴在文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">default_color white</span><br><span class="line">double_buffer yes</span><br><span class="line">no_buffers yes</span><br><span class="line">update_interval 1.0</span><br><span class="line">total_run_times 0</span><br><span class="line">own_window yes</span><br><span class="line">own_window_type dock</span><br><span class="line">own_window_transparent yes</span><br><span class="line">own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager</span><br><span class="line">own_window_colour 000000</span><br><span class="line">own_window_argb_visual yes</span><br><span class="line">own_window_argb_value 0</span><br><span class="line">double_buffer yes</span><br><span class="line">draw_shades yes</span><br><span class="line">draw_outline no</span><br><span class="line">draw_borders no</span><br><span class="line">draw_graph_borders n0</span><br><span class="line">minimum_size 296 10</span><br><span class="line">maximum_width 250</span><br><span class="line">default_color ffffff</span><br><span class="line">default_shade_color 000000</span><br><span class="line">default_outline_color 000000</span><br><span class="line">alignment top_right</span><br><span class="line">gap_x 6</span><br><span class="line">gap_y 30</span><br><span class="line">cpu_avg_samples 2</span><br><span class="line">override_utf8_locale no</span><br><span class="line">uppercase no # set to yes if you want all text to be in uppercase</span><br><span class="line">use_spacer no</span><br><span class="line">use_xft yes</span><br><span class="line">xftfont WenQuanYi Zen Hei:pixelsize=12</span><br><span class="line">override_utf8_locale yes</span><br><span class="line">use_spacer no</span><br><span class="line">minimum_size 296 10</span><br><span class="line">TEXT</span><br><span class="line">$&#123;font LCD:style=Bold:pixelsize=20&#125;$&#123;alignc&#125;$&#123;time %H:%M&#125;$&#123;font LCD:pixelsize=14&#125; $&#123;time %S&#125;$&#123;font WenQuanYi Zen Hei:style=Bold:pixelsize=14&#125;</span><br><span class="line">$&#123;alignc&#125;$&#123;time %Y-%m-%d 星期%a&#125;</span><br><span class="line">$&#123;hr 2&#125;</span><br><span class="line">$&#123;font WenQuanYi Zen Hei:pixelsize=12&#125;</span><br><span class="line">$&#123;color #6699CC&#125;主机 $&#123;color&#125;$alignr$nodename</span><br><span class="line">$&#123;color #6699CC&#125;内核  $&#123;color&#125;$alignr$kernel</span><br><span class="line">$&#123;color #6699CC&#125;已开机 $&#123;color&#125;$alignr$uptime</span><br><span class="line">$&#123;color #6699CC&#125;CPU $&#123;color&#125;$cpu%</span><br><span class="line">$&#123;cpubar 4 /&#125;</span><br><span class="line">$&#123;color #6699CC&#125;内存$&#123;color&#125;$&#123;alignr&#125;$mem / $memmax</span><br><span class="line">$&#123;membar&#125;</span><br><span class="line">$&#123;color #6699CC&#125;磁盘 $&#123;color&#125;$&#123;alignr&#125;$&#123;fs_used /&#125;/$&#123;fs_size /&#125;</span><br><span class="line">$&#123;fs_bar 4 /&#125;</span><br><span class="line">$&#123;color #6699CC&#125;CPU占用$&#123;color&#125;</span><br><span class="line"> $&#123;top name 1&#125; $&#123;alignr&#125;$&#123;top cpu 1&#125; </span><br><span class="line"> $&#123;top name 2&#125; $&#123;alignr&#125;$&#123;top cpu 2&#125; </span><br><span class="line"> $&#123;top name 3&#125; $&#123;alignr&#125;$&#123;top cpu 3&#125; </span><br><span class="line"> $&#123;top name 4&#125; $&#123;alignr&#125;$&#123;top cpu 4&#125; </span><br><span class="line">$&#123;color #6699CC&#125;网络$&#123;color&#125;$alignr$&#123;addr wlx7cdd90475a53&#125;</span><br><span class="line">下载速度:$alignr$&#123;downspeed wlx7cdd90475a53&#125;</span><br><span class="line">上传速度:$alignr$&#123;upspeed wlx7cdd90475a53&#125;</span><br></pre></td></tr></table></figure><p>打开 <strong>终端</strong> 输入 <code>conkey-manager</code> 来启动</p><p>在选项中勾选你的配置文件将其启动并设置开机自启</p><p><img src="/images/conky-manager-info.png" alt></p><p><img src="/images/conky-manager-info-1.png" alt></p><p><img src="/images/conky-manager-info-2.png" alt></p><p>可能有些细心的小伙伴发现了，网速和网络配置项不显示问题</p><p>这里是需要配置你的网卡的</p><p>在 <strong>终端</strong> 中输入 <code>ifconfig</code></p><p>将有内网IP的左边，复制并将上述网卡信息更换为你的网卡信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;color #6699CC&#125;网络$&#123;color&#125;$alignr$&#123;addr 替换这里&#125;</span><br><span class="line">下载速度:$alignr$&#123;downspeed 替换这里&#125;</span><br><span class="line">上传速度:$alignr$&#123;upspeed 替换这里&#125;</span><br></pre></td></tr></table></figure><p>更多的conky语法请参考<a href="https://github.com/brndnmtthws/conky" title="官网" target="_blank" rel="noopener">官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Conky是Linux下的桌面美化工具，可以把系统信息显示到桌面上。而conky-manager则有更好的UI模式，至少不闪来闪去的&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>deepin配置swap解决内存问题</title>
    <link href="http://yoursite.com/2019/10/31/deepin%E9%85%8D%E7%BD%AEswap%E8%A7%A3%E5%86%B3%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/10/31/deepin配置swap解决内存问题/</id>
    <published>2019-10-31T06:23:06.000Z</published>
    <updated>2019-11-08T12:24:08.656Z</updated>
    
    <content type="html"><![CDATA[<p>解决渣机卡爆苦恼问题</p><a id="more"></a><hr><hr><p>title: deepin配置swap 解决内存问题<br>date: 2019-10-31 14:23:06</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>解决渣机卡爆苦恼问题</p><!-- more --><hr><p>光一个臃肿的chrome就吃了我 1G 的内存！<br>我就 4G 的内存，要是多开几个进程我的渣机就真的能炸鸡了…</p><p>不行，我不能坐以待毙！</p><p>swap搞起！</p><p><strong>(注意！非专业人士请慎重配置！专业人士当我没说)</strong></p><pre><code>#管理员模式sudo su #新建一个10G的交换区，根据需要设置dd if=/dev/zero of=/root/swapfile bs=1M count=10240 # 建立swap的文件系统mkswap /root/swapfile# 启用swap文件swapon /root/swapfile# 给予权限chmod 644 /root/swapfile# 修改系统开机启动配置vim /etc/fstab# 已经有一行旧的配置# /swapfile none swap defaults 0 0# 注销掉# 新增一行/root/swapfile none swap defaults 0 0</code></pre><p>旧的交换区可以直接删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /swapfile</span><br></pre></td></tr></table></figure><p>我终于可以一边开着chrome一边写代码了，可喜可贺… (落下了贫穷的泪水)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决渣机卡爆苦恼问题&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于Composer和Laravel的配置</title>
    <link href="http://yoursite.com/2016/06/03/%E5%85%B3%E4%BA%8EComposer%E5%92%8CLaravel%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/06/03/关于Composer和Laravel的配置/</id>
    <published>2016-06-03T04:53:23.000Z</published>
    <updated>2019-11-08T11:59:27.732Z</updated>
    
    <content type="html"><![CDATA[<p>那些关于phpstudy的Composer以及Laravel框架的配置还有踩过的坑</p><a id="more"></a><hr><h3 id="PHPstudy-2018-的配置"><a href="#PHPstudy-2018-的配置" class="headerlink" title="PHPstudy 2018 的配置"></a>PHPstudy 2018 的配置</h3><p><a href="http://phpstudy.php.cn/" title="PHPstudy" target="_blank" rel="noopener">PHPstudy</a>，体积小易用但是一些操作还是却逊色于集成环境，例如Xampp</p><h4 id="先说Composer"><a href="#先说Composer" class="headerlink" title="先说Composer"></a>先说Composer</h4><p>phpstudy集成了composer的拓展，但是需要配置<strong>环境变量</strong></p><h5 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h5><p>windows10 版本 1903<br>桌面-&gt;我的电脑-&gt;右键属性-&gt;左侧 高级系统设置-&gt;环境变量<br>编辑变量Path<br>将phpstudy的php和composer的路径写入到路径中，<strong>注意用分号隔开其他路径</strong><br><strong>例如</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Tool\phpStudy\PHPTutorial\php\php-7.2.1-nts</span><br><span class="line">C:\Tool\phpStudy\PHPTutorial\tools\composer</span><br></pre></td></tr></table></figure><p><strong>注意PHP版本问题</strong></p><p>如果你的环境没有问题，检查一下你是否打开了php_openssl 无误后，就可以正常使用composer了</p><hr><p>###phpStudy v8.0 的配置<br>phpstudy进行了更新，最明显的就是UI进行了美化<br>composer功能在如下位置：<br>网站 -&gt; 管理 -&gt; Composer </p><h2 id="除了和上面一样配置composer之外并无什么不同"><a href="#除了和上面一样配置composer之外并无什么不同" class="headerlink" title="除了和上面一样配置composer之外并无什么不同"></a>除了和上面一样配置composer之外并无什么不同</h2><h3 id="Laravel的安装"><a href="#Laravel的安装" class="headerlink" title="Laravel的安装"></a>Laravel的安装</h3><p>没错，laravel的安装用到了上面的composer<br>如果你在上面碰到了问题，而你的耐心让你看到了这里，那么你的部分问题可以得到解决，如果你在下面的问题中没有得到你想要的，抱歉，我还是个小白，未来我会补上的</p><h4 id="使用composer进行安装"><a href="#使用composer进行安装" class="headerlink" title="使用composer进行安装"></a>使用composer进行安装</h4><p><strong>在命令行下输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer global require laravel/installer</span><br></pre></td></tr></table></figure><p><strong>如果你碰到了标红的问题的话：</strong></p><p>** [Symfony\Component\Console\Exception\RuntimeException]<br>  Not enough arguments (missing: “command-name”).**</p><p>那么应该去你的phpstudy的安装目录里面找到composer.bat这个文件<br>位置例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Tool\phpStudy\PHPTutorial\tools\composer</span><br></pre></td></tr></table></figure><p>编辑composer.bat这个文件<br>将composer.bat 里面的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">C:\Tool\phpStudy\PHPTutorial\php\php-7.2.1-nts\php.exe C:\Tool\phpStudy\PHPTutorial\tools\composer\composer.phar %1</span><br></pre></td></tr></table></figure><p>%1 改成 %*<br>问题解决</p><p>在一段时间的安装后Laravel就安装完成了，但是你是看不到它的<br>我们需要创建Laravel才能正确的使用它</p><p>在这里我推荐使用<strong>composer</strong>来进行新项目的创建<br>在命令行中选定你需要创建的文件夹，然后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist laravel/laravel project-name</span><br></pre></td></tr></table></figure><p>project-name 是你要创建的项目的名称<strong>(注意：在创建项目之前，该文件夹你需要有composer.json文件)</strong></p><p>接下来在你的浏览器输入你的项目地址就能看到你的Laravel项目了<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/project-name/public</span><br></pre></td></tr></table></figure><p>接下来你就需要<a href="https://laravel.com" title="Laravel" target="_blank" rel="noopener">Laravel</a>文档进行配合开发了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那些关于phpstudy的Composer以及Laravel框架的配置还有踩过的坑&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo: 搭建属于自己的静态博客</title>
    <link href="http://yoursite.com/2016/06/01/Hexo-%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/06/01/Hexo-搭建属于自己的静态博客/</id>
    <published>2016-06-01T15:55:21.000Z</published>
    <updated>2019-11-08T12:58:41.609Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo是一个快速、简洁且高效的博客框架。下面将介绍如何使用Hexo，在win10环境下搭建一个静态的博客。</p><a id="more"></a><hr><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="安装和配置Hexo"><a href="#安装和配置Hexo" class="headerlink" title="安装和配置Hexo"></a>安装和配置Hexo</h2><h3 id="安装Hexo前，需要安装以下："><a href="#安装Hexo前，需要安装以下：" class="headerlink" title="安装Hexo前，需要安装以下："></a>安装Hexo前，需要安装以下：</h3><ul><li>Node.js</li><li>Git</li></ul><p>如果已经安装完成以上程序，打开Git-bash或者cmd，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>即可完成Hexo的安装。</p><h3 id="使用Hexo进行本地建站"><a href="#使用Hexo进行本地建站" class="headerlink" title="使用Hexo进行本地建站"></a>使用Hexo进行本地建站</h3><p>选择一个本地的文件夹，如<code>D:\hexo</code>。</p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init D:\hexo</span><br><span class="line">cd D:\hexo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>如果hexo安装成功，则在<code>D:\hexo</code>文件夹下的文件目录为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml // 网站的配置信息，你可以在此配置大部分的参数。</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds // 模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。</span><br><span class="line">├── source // 存放用户资源的地方</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes // 存放网站的主题。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure><p>详细文件或文件夹的具体含义见 <a href="https://hexo.io/zh-cn/docs/setup.html" title="Hexo官方文档之建站" target="_blank" rel="noopener">Hexo官方文档之建站</a></p><p>为了测试本地建站是否成功，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>本地建站成功，访问<a href="http://localhost:4000/" title="本地地址" target="_blank" rel="noopener">本地地址</a>可以看到Hexo默认主题的效果。</p><p>至此，Hexo的安装和本地建站完成，如需更加深入全面地了解Hexo，可访问<a href="https://hexo.io/zh-cn/docs/" title="Hexo官方文档" target="_blank" rel="noopener">Hexo官方文档</a>。</p><hr><h2 id="将Hexo静态博客部署到GitHub"><a href="#将Hexo静态博客部署到GitHub" class="headerlink" title="将Hexo静态博客部署到GitHub"></a>将Hexo静态博客部署到GitHub</h2><p>首先你需要有一个GitHub账号</p><p>在git中连接上你的用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email your-email</span><br></pre></td></tr></table></figure><h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><h3 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h3><p>检查是否存在SSH Key 打开 Git bash 输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>如果没有这个目录，则生成一个新的SSH，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your e-mail&quot;</span><br></pre></td></tr></table></figure><p>然后接下来几步都直接按回车键就可以了</p><h3 id="复制公钥内容到Github账户信息中"><a href="#复制公钥内容到Github账户信息中" class="headerlink" title="复制公钥内容到Github账户信息中"></a>复制公钥内容到Github账户信息中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制里面的内容；</p><p><strong>按照步骤配置SSH</strong></p><ol><li>打开Github官网</li><li>登陆后进入到个人设置(点击头像-&gt;setting)</li><li>点击 SSH and GPG keys</li><li>点击 News SSH key；</li><li>填写title之后，将之前复制的内容粘贴到Key框中，最后点击Add key即可。</li></ol><h3 id="测试SSH是否配置成功"><a href="#测试SSH是否配置成功" class="headerlink" title="测试SSH是否配置成功"></a>测试SSH是否配置成功</h3><p><strong>输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果显示以下，则说明ssh配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><p>将网站发布到Github的同名repository中<br>打开D:\Hexo文件夹中的_config.yml文件，找到如下位置，填写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:MyGithub/MyGithub.github.io</span><br></pre></td></tr></table></figure><p><strong>注： (1) 其中MyGithub替换成你的Github账户; (2) 注意在yml文件中，:后面都是要带空格的。</strong></p><p>此时，通过访问<a href="http://MyGithub.github.io可以看到默认的Hexo首页面（与之前本地测试时一样）。" target="_blank" rel="noopener">http://MyGithub.github.io可以看到默认的Hexo首页面（与之前本地测试时一样）。</a></p><hr><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="安装和配置Hexo-1"><a href="#安装和配置Hexo-1" class="headerlink" title="安装和配置Hexo"></a>安装和配置Hexo</h2><h3 id="安装Hexo前，需要安装以下：-1"><a href="#安装Hexo前，需要安装以下：-1" class="headerlink" title="安装Hexo前，需要安装以下："></a>安装Hexo前，需要安装以下：</h3><ul><li>Node.js</li><li>Git</li></ul><p>####Node.js 在linux上的安装以及配置<br>(ps:这里选用的是deepin)<br>在官网下载好linux版本的32或者64位的文件并解压缩到指定位置</p><p>我将它解压重命名并移动到了根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xz -d node-v12.13.0-linux-x64.tar.xz </span><br><span class="line">tar xvf node-v12.13.0-linux-x64.tar </span><br><span class="line">mv node-v12.13.0-linux-x64 /node</span><br></pre></td></tr></table></figure><p>我们在下载之后不能直接使用，要将其配置为全局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /node/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /node/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure><p>配置好之后，记得检查升级一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm #检查升级npm</span><br><span class="line">npm i -g n #检查升级node</span><br></pre></td></tr></table></figure><p>你没看错，升级node用一个n就可以了，n是node下的一个模块，作者是Express框架的开发者</p><p>####Git 在linux上的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>如果已经安装完成以上程序，打开终端，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>即可完成Hexo的安装</p><p><strong>但是还有一件事！</strong></p><p>没错，hexo也要配置全局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /node/lib/node_modules/hexo-cli/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure><p>然后就可以使用hexo命令了</p><h3 id="使用Hexo进行本地建站-1"><a href="#使用Hexo进行本地建站-1" class="headerlink" title="使用Hexo进行本地建站"></a>使用Hexo进行本地建站</h3><p>选定位置或者文件夹，如<code>～/Documents/hexo</code></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init ～/Documents/hexo</span><br><span class="line">cd ～/Documents/hexo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>如果hexo安装成功，则在<code>～/Documents/hexo</code>文件夹下的文件目录为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml // 网站的配置信息，你可以在此配置大部分的参数。</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds // 模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。</span><br><span class="line">├── source // 存放用户资源的地方</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes // 存放网站的主题。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure><p>详细文件或文件夹的具体含义见 <a href="https://hexo.io/zh-cn/docs/setup.html" title="Hexo官方文档之建站" target="_blank" rel="noopener">Hexo官方文档之建站</a></p><p>为了测试本地建站是否成功，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>本地建站成功，访问<a href="http://localhost:4000/" title="本地地址" target="_blank" rel="noopener">本地地址</a>可以看到Hexo默认主题的效果。</p><p>至此，Hexo的安装和本地建站完成，如需更加深入全面地了解Hexo，可访问<a href="https://hexo.io/zh-cn/docs/" title="Hexo官方文档" target="_blank" rel="noopener">Hexo官方文档</a>。</p><hr><h2 id="将Hexo静态博客部署到GitHub-1"><a href="#将Hexo静态博客部署到GitHub-1" class="headerlink" title="将Hexo静态博客部署到GitHub"></a>将Hexo静态博客部署到GitHub</h2><p>首先你需要有一个GitHub账号</p><p>在git中连接上你的用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email your-email</span><br></pre></td></tr></table></figure><h2 id="配置SSH-1"><a href="#配置SSH-1" class="headerlink" title="配置SSH"></a>配置SSH</h2><h3 id="生成ssh-1"><a href="#生成ssh-1" class="headerlink" title="生成ssh"></a>生成ssh</h3><p>检查是否存在SSH Key 打开 *<em>终端 *</em>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>如果没有这个目录，则生成一个新的SSH，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your e-mail&quot;</span><br></pre></td></tr></table></figure><p>然后接下来几步都直接按回车键就可以了</p><h3 id="复制公钥内容到Github账户信息中-1"><a href="#复制公钥内容到Github账户信息中-1" class="headerlink" title="复制公钥内容到Github账户信息中"></a>复制公钥内容到Github账户信息中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制里面的内容；</p><p><strong>按照步骤配置SSH</strong></p><ol><li>打开Github官网</li><li>登陆后进入到个人设置(点击头像-&gt;setting)</li><li>点击 SSH and GPG keys</li><li>点击 News SSH key；</li><li>填写title之后，将之前复制的内容粘贴到Key框中，最后点击Add key即可。</li></ol><h3 id="测试SSH是否配置成功-1"><a href="#测试SSH是否配置成功-1" class="headerlink" title="测试SSH是否配置成功"></a>测试SSH是否配置成功</h3><p><strong>输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果显示以下，则说明ssh配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><p>将网站发布到Github的同名repository中<br>打开～/Documents/hexo文件夹中的_config.yml文件，找到如下位置，填写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:MyGithub/MyGithub.github.io</span><br></pre></td></tr></table></figure><p><strong>注： (1) 其中MyGithub替换成你的Github账户; (2) 注意在yml文件中，:后面都是要带空格的。</strong></p><p>此时，通过访问<a href="http://MyGithub.github.io可以看到默认的Hexo首页面（与之前本地测试时一样）。" target="_blank" rel="noopener">http://MyGithub.github.io可以看到默认的Hexo首页面（与之前本地测试时一样）。</a></p><hr><h2 id="分享几个-Hexo-常用的指令"><a href="#分享几个-Hexo-常用的指令" class="headerlink" title="分享几个 Hexo 常用的指令"></a>分享几个 Hexo 常用的指令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><p>选项    描述<br>-d, –deploy    文件生成后立即部署网站<br>-w, –watch    监视文件变动</p><p>该命令可以简写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></p><p>选项    描述<br>-p, –port    重设端口<br>-s, –static    只使用静态文件<br>-l, –log    启动日记记录，使用覆盖记录格式</p><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><p>参数    描述<br>-g, –generate    部署之前预先生成静态文件<br>该命令可以简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><p>参数    描述<br>-o, –output    设置输出路径</p><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 迁移内容。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现你对站点的更改无论如何也不生效，你可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当你在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>Hexo 有很多的主题和第三方服务能进行配置，详情请访问Hexo官方网站<br>本博客选用主题为 <a href="http://theme-next.iissnan.com/" title="Next" target="_blank" rel="noopener">Next</a>  详情见官方文档</p><p>可将本地Hexo文件夹进行压缩后上传至GitHub进行云端备份</p><p>本文转自<a href="http://www.jeyzhang.com/hexo-github-blog-building.html" target="_blank" rel="noopener">http://www.jeyzhang.com/hexo-github-blog-building.html</a> 的 Hexo博客</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一个快速、简洁且高效的博客框架。下面将介绍如何使用Hexo，在win10环境下搭建一个静态的博客。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/05/24/Hello-World/"/>
    <id>http://yoursite.com/2016/05/24/Hello-World/</id>
    <published>2016-05-24T15:06:44.000Z</published>
    <updated>2019-07-13T10:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>我为什么选择 Hexo + GitHub 作为我的博客呢?<br>“We attribute the United States to plain and simple, real, just right.”</p><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我为什么选择 Hexo + GitHub 作为我的博客呢?&lt;br&gt;“We attribute the United States to plain and simple, real, just right.”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
