<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[deepin下设置conky-manager]]></title>
    <url>%2F2019%2F11%2F03%2Fdeepin%E4%B8%8B%E8%AE%BE%E7%BD%AEconky-manager%2F</url>
    <content type="text"><![CDATA[Conky是Linux下的桌面美化工具，可以把系统信息显示到桌面上。而conky-manager则有更好的UI模式，至少不闪来闪去的 conky-manager是conky的拓展，所以我们需要conky的主体文件 # 安装 conky sudo apt install conky-all # 安装 conky-manager wget –no-check-certificate https://github.com/teejee2008/conky-manager/releases/download/v2.4/conky-manager-v2.4-amd64.run chmod +x conky-manager-v2.4-amd64.run sudo ./conky-manager-v2.4-amd64.run 如果出现问题可以去conky-manager作者的github手动干预 安装完成后，进入主目录下的 .conky (这是个隐藏文件夹) 创建一个属于你的conky配置，命令如下 123cd ~/.conkymkdir MyConkytouch MyConkyInfo 并将下面的代码粘贴在文件中 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556default_color whitedouble_buffer yesno_buffers yesupdate_interval 1.0total_run_times 0own_window yesown_window_type dockown_window_transparent yesown_window_hints undecorated,below,sticky,skip_taskbar,skip_pagerown_window_colour 000000own_window_argb_visual yesown_window_argb_value 0double_buffer yesdraw_shades yesdraw_outline nodraw_borders nodraw_graph_borders n0minimum_size 296 10maximum_width 250default_color ffffffdefault_shade_color 000000default_outline_color 000000alignment top_rightgap_x 6gap_y 30cpu_avg_samples 2override_utf8_locale nouppercase no # set to yes if you want all text to be in uppercaseuse_spacer nouse_xft yesxftfont WenQuanYi Zen Hei:pixelsize=12override_utf8_locale yesuse_spacer nominimum_size 296 10TEXT$&#123;font LCD:style=Bold:pixelsize=20&#125;$&#123;alignc&#125;$&#123;time %H:%M&#125;$&#123;font LCD:pixelsize=14&#125; $&#123;time %S&#125;$&#123;font WenQuanYi Zen Hei:style=Bold:pixelsize=14&#125;$&#123;alignc&#125;$&#123;time %Y-%m-%d 星期%a&#125;$&#123;hr 2&#125;$&#123;font WenQuanYi Zen Hei:pixelsize=12&#125;$&#123;color #6699CC&#125;主机 $&#123;color&#125;$alignr$nodename$&#123;color #6699CC&#125;内核 $&#123;color&#125;$alignr$kernel$&#123;color #6699CC&#125;已开机 $&#123;color&#125;$alignr$uptime$&#123;color #6699CC&#125;CPU $&#123;color&#125;$cpu%$&#123;cpubar 4 /&#125;$&#123;color #6699CC&#125;内存$&#123;color&#125;$&#123;alignr&#125;$mem / $memmax$&#123;membar&#125;$&#123;color #6699CC&#125;磁盘 $&#123;color&#125;$&#123;alignr&#125;$&#123;fs_used /&#125;/$&#123;fs_size /&#125;$&#123;fs_bar 4 /&#125;$&#123;color #6699CC&#125;CPU占用$&#123;color&#125; $&#123;top name 1&#125; $&#123;alignr&#125;$&#123;top cpu 1&#125; $&#123;top name 2&#125; $&#123;alignr&#125;$&#123;top cpu 2&#125; $&#123;top name 3&#125; $&#123;alignr&#125;$&#123;top cpu 3&#125; $&#123;top name 4&#125; $&#123;alignr&#125;$&#123;top cpu 4&#125; $&#123;color #6699CC&#125;网络$&#123;color&#125;$alignr$&#123;addr wlx7cdd90475a53&#125;下载速度:$alignr$&#123;downspeed wlx7cdd90475a53&#125;上传速度:$alignr$&#123;upspeed wlx7cdd90475a53&#125; 打开 终端 输入 conkey-manager 来启动 在选项中勾选你的配置文件将其启动并设置开机自启 可能有些细心的小伙伴发现了，网速和网络配置项不显示问题 这里是需要配置你的网卡的 在 终端 中输入 ifconfig 将有内网IP的左边，复制并将上述网卡信息更换为你的网卡信息 123$&#123;color #6699CC&#125;网络$&#123;color&#125;$alignr$&#123;addr 替换这里&#125;下载速度:$alignr$&#123;downspeed 替换这里&#125;上传速度:$alignr$&#123;upspeed 替换这里&#125; 更多的conky语法请参考官网]]></content>
  </entry>
  <entry>
    <title><![CDATA[deepin配置swap解决内存问题]]></title>
    <url>%2F2019%2F10%2F31%2Fdeepin%E9%85%8D%E7%BD%AEswap%E8%A7%A3%E5%86%B3%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[解决渣机卡爆苦恼问题 title: deepin配置swap 解决内存问题date: 2019-10-31 14:23:06 tags:解决渣机卡爆苦恼问题 光一个臃肿的chrome就吃了我 1G 的内存！我就 4G 的内存，要是多开几个进程我的渣机就真的能炸鸡了… 不行，我不能坐以待毙！ swap搞起！ (注意！非专业人士请慎重配置！专业人士当我没说) #管理员模式 sudo su #新建一个10G的交换区，根据需要设置 dd if=/dev/zero of=/root/swapfile bs=1M count=10240 # 建立swap的文件系统 mkswap /root/swapfile # 启用swap文件 swapon /root/swapfile # 给予权限 chmod 644 /root/swapfile # 修改系统开机启动配置 vim /etc/fstab # 已经有一行旧的配置 # /swapfile none swap defaults 0 0 # 注销掉 # 新增一行 /root/swapfile none swap defaults 0 0旧的交换区可以直接删除 1sudo rm /swapfile 我终于可以一边开着chrome一边写代码了，可喜可贺… (落下了贫穷的泪水)]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于Composer和Laravel的配置]]></title>
    <url>%2F2016%2F06%2F03%2F%E5%85%B3%E4%BA%8EComposer%E5%92%8CLaravel%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[那些关于phpstudy的Composer以及Laravel框架的配置还有踩过的坑 PHPstudy 2018 的配置PHPstudy，体积小易用但是一些操作还是却逊色于集成环境，例如Xampp 先说Composerphpstudy集成了composer的拓展，但是需要配置环境变量 环境变量配置windows10 版本 1903桌面-&gt;我的电脑-&gt;右键属性-&gt;左侧 高级系统设置-&gt;环境变量编辑变量Path将phpstudy的php和composer的路径写入到路径中，注意用分号隔开其他路径例如： 12C:\Tool\phpStudy\PHPTutorial\php\php-7.2.1-ntsC:\Tool\phpStudy\PHPTutorial\tools\composer 注意PHP版本问题 如果你的环境没有问题，检查一下你是否打开了php_openssl 无误后，就可以正常使用composer了 ###phpStudy v8.0 的配置phpstudy进行了更新，最明显的就是UI进行了美化composer功能在如下位置：网站 -&gt; 管理 -&gt; Composer 除了和上面一样配置composer之外并无什么不同Laravel的安装没错，laravel的安装用到了上面的composer如果你在上面碰到了问题，而你的耐心让你看到了这里，那么你的部分问题可以得到解决，如果你在下面的问题中没有得到你想要的，抱歉，我还是个小白，未来我会补上的 使用composer进行安装在命令行下输入 1composer global require laravel/installer 如果你碰到了标红的问题的话： ** [Symfony\Component\Console\Exception\RuntimeException] Not enough arguments (missing: “command-name”).** 那么应该去你的phpstudy的安装目录里面找到composer.bat这个文件位置例如： 1C:\Tool\phpStudy\PHPTutorial\tools\composer 编辑composer.bat这个文件将composer.bat 里面的 12@ECHO OFFC:\Tool\phpStudy\PHPTutorial\php\php-7.2.1-nts\php.exe C:\Tool\phpStudy\PHPTutorial\tools\composer\composer.phar %1 %1 改成 %*问题解决 在一段时间的安装后Laravel就安装完成了，但是你是看不到它的我们需要创建Laravel才能正确的使用它 在这里我推荐使用composer来进行新项目的创建在命令行中选定你需要创建的文件夹，然后输入： 1composer create-project --prefer-dist laravel/laravel project-name project-name 是你要创建的项目的名称(注意：在创建项目之前，该文件夹你需要有composer.json文件) 接下来在你的浏览器输入你的项目地址就能看到你的Laravel项目了例如： 1http://localhost/project-name/public 接下来你就需要Laravel文档进行配合开发了]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo: 搭建属于自己的静态博客]]></title>
    <url>%2F2016%2F06%2F01%2FHexo-%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo是一个快速、简洁且高效的博客框架。下面将介绍如何使用Hexo，在win10环境下搭建一个静态的博客。 Windows安装和配置Hexo安装Hexo前，需要安装以下： Node.js Git 如果已经安装完成以上程序，打开Git-bash或者cmd，输入 1npm install -g hexo-cli 即可完成Hexo的安装。 使用Hexo进行本地建站选择一个本地的文件夹，如D:\hexo。 输入 123hexo init D:\hexocd D:\hexonpm install 如果hexo安装成功，则在D:\hexo文件夹下的文件目录为 12345678.├── _config.yml // 网站的配置信息，你可以在此配置大部分的参数。├── package.json├── scaffolds // 模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。├── source // 存放用户资源的地方| ├── _drafts| └── _posts└── themes // 存放网站的主题。Hexo会根据主题来生成静态页面。 详细文件或文件夹的具体含义见 Hexo官方文档之建站 为了测试本地建站是否成功，输入 1hexo s 本地建站成功，访问本地地址可以看到Hexo默认主题的效果。 至此，Hexo的安装和本地建站完成，如需更加深入全面地了解Hexo，可访问Hexo官方文档。 将Hexo静态博客部署到GitHub首先你需要有一个GitHub账号 在git中连接上你的用户名和邮箱 12git config --global user.name &quot;your name&quot;git config --global user.email your-email 配置SSH生成ssh检查是否存在SSH Key 打开 Git bash 输入 1cd ~/.ssh 如果没有这个目录，则生成一个新的SSH，输入 1ssh-keygen -t rsa -C &quot;your e-mail&quot; 然后接下来几步都直接按回车键就可以了 复制公钥内容到Github账户信息中1cat ~/.ssh/id_rsa.pub 复制里面的内容； 按照步骤配置SSH 打开Github官网 登陆后进入到个人设置(点击头像-&gt;setting) 点击 SSH and GPG keys 点击 News SSH key； 填写title之后，将之前复制的内容粘贴到Key框中，最后点击Add key即可。 测试SSH是否配置成功输入 1ssh -T git@github.com 如果显示以下，则说明ssh配置成功。 12Hi username! You&apos;ve successfully authenticated, but GitHub does notprovide shell access. 将网站发布到Github的同名repository中打开D:\Hexo文件夹中的_config.yml文件，找到如下位置，填写 12345# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:MyGithub/MyGithub.github.io 注： (1) 其中MyGithub替换成你的Github账户; (2) 注意在yml文件中，:后面都是要带空格的。 此时，通过访问http://MyGithub.github.io可以看到默认的Hexo首页面（与之前本地测试时一样）。 linux安装和配置Hexo安装Hexo前，需要安装以下： Node.js Git ####Node.js 在linux上的安装以及配置(ps:这里选用的是deepin)在官网下载好linux版本的32或者64位的文件并解压缩到指定位置 我将它解压重命名并移动到了根目录 123xz -d node-v12.13.0-linux-x64.tar.xz tar xvf node-v12.13.0-linux-x64.tar mv node-v12.13.0-linux-x64 /node 我们在下载之后不能直接使用，要将其配置为全局 12ln -s /node/bin/node /usr/local/bin/nodeln -s /node/bin/npm /usr/local/bin/npm 配置好之后，记得检查升级一下 12npm i -g npm #检查升级npmnpm i -g n #检查升级node 你没看错，升级node用一个n就可以了，n是node下的一个模块，作者是Express框架的开发者 ####Git 在linux上的安装 1sudo apt-get install git 如果已经安装完成以上程序，打开终端，输入 1npm install -g hexo-cli 即可完成Hexo的安装 但是还有一件事！ 没错，hexo也要配置全局 1ln -s /node/lib/node_modules/hexo-cli/hexo /usr/local/bin/hexo 然后就可以使用hexo命令了 使用Hexo进行本地建站选定位置或者文件夹，如～/Documents/hexo 输入 123hexo init ～/Documents/hexocd ～/Documents/hexonpm install 如果hexo安装成功，则在～/Documents/hexo文件夹下的文件目录为 12345678.├── _config.yml // 网站的配置信息，你可以在此配置大部分的参数。├── package.json├── scaffolds // 模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。├── source // 存放用户资源的地方| ├── _drafts| └── _posts└── themes // 存放网站的主题。Hexo会根据主题来生成静态页面。 详细文件或文件夹的具体含义见 Hexo官方文档之建站 为了测试本地建站是否成功，输入 1hexo s 本地建站成功，访问本地地址可以看到Hexo默认主题的效果。 至此，Hexo的安装和本地建站完成，如需更加深入全面地了解Hexo，可访问Hexo官方文档。 将Hexo静态博客部署到GitHub首先你需要有一个GitHub账号 在git中连接上你的用户名和邮箱 12git config --global user.name &quot;your name&quot;git config --global user.email your-email 配置SSH生成ssh检查是否存在SSH Key 打开 *终端 *输入 1cd ~/.ssh 如果没有这个目录，则生成一个新的SSH，输入 1ssh-keygen -t rsa -C &quot;your e-mail&quot; 然后接下来几步都直接按回车键就可以了 复制公钥内容到Github账户信息中1cat ~/.ssh/id_rsa.pub 复制里面的内容； 按照步骤配置SSH 打开Github官网 登陆后进入到个人设置(点击头像-&gt;setting) 点击 SSH and GPG keys 点击 News SSH key； 填写title之后，将之前复制的内容粘贴到Key框中，最后点击Add key即可。 测试SSH是否配置成功输入 1ssh -T git@github.com 如果显示以下，则说明ssh配置成功。 12Hi username! You&apos;ve successfully authenticated, but GitHub does notprovide shell access. 将网站发布到Github的同名repository中打开～/Documents/hexo文件夹中的_config.yml文件，找到如下位置，填写 12345# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:MyGithub/MyGithub.github.io 注： (1) 其中MyGithub替换成你的Github账户; (2) 注意在yml文件中，:后面都是要带空格的。 此时，通过访问http://MyGithub.github.io可以看到默认的Hexo首页面（与之前本地测试时一样）。 分享几个 Hexo 常用的指令init1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 1$ hexo new &quot;post title with whitespace&quot; generate1$ hexo generate 生成静态文件。 选项 描述-d, –deploy 文件生成后立即部署网站-w, –watch 监视文件变动 该命令可以简写为 1$ hexo g publish1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述-p, –port 重设端口-s, –static 只使用静态文件-l, –log 启动日记记录，使用覆盖记录格式 deploy1$ hexo deploy 部署网站。 参数 描述-g, –generate 部署之前预先生成静态文件该命令可以简写为： 1$ hexo d render1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述-o, –output 设置输出路径 migrate1$ hexo migrate &lt;type&gt; 从其他博客系统 迁移内容。 clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现你对站点的更改无论如何也不生效，你可能需要运行该命令。 list1$ hexo list &lt;type&gt; 列出网站资料。 version1$ hexo version 显示 Hexo 版本。 安全模式1$ hexo --safe 在安全模式下，不会载入插件和脚本。当你在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式1$ hexo --debug Hexo 有很多的主题和第三方服务能进行配置，详情请访问Hexo官方网站本博客选用主题为 Next 详情见官方文档 可将本地Hexo文件夹进行压缩后上传至GitHub进行云端备份 本文转自http://www.jeyzhang.com/hexo-github-blog-building.html 的 Hexo博客]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F05%2F24%2FHello-World%2F</url>
    <content type="text"><![CDATA[我为什么选择 Hexo + GitHub 作为我的博客呢?“We attribute the United States to plain and simple, real, just right.”]]></content>
  </entry>
</search>
